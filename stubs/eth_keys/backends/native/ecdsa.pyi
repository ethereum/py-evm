from .jacobian import fast_add, fast_multiply, from_jacobian, inv, jacobian_add, jacobian_multiply
from typing import Any, Callable, Optional, Tuple

def decode_public_key(public_key_bytes): ...
def encode_raw_public_key(raw_public_key: Tuple[int, int]) -> bytes: ...
def private_key_to_public_key(private_key_bytes: bytes) -> bytes: ...
def deterministic_generate_k(msg_hash: bytes, private_key_bytes: bytes, digest_fn: Callable[<TypeList >, Any]=...) -> int: ...
def ecdsa_raw_sign(msg_hash: bytes, private_key_bytes: bytes) -> Tuple[int, int, int]: ...
def ecdsa_raw_verify(msg_hash: bytes, vrs: Tuple[int, int, int], public_key_bytes: bytes) -> Optional[bool]: ...
def ecdsa_raw_recover(msg_hash: bytes, vrs: Tuple[int, int, int]) -> Optional[bytes]: ...
